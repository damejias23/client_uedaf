/*
Nuedaf_EventExposure

UEDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uedaf

import (
	"encoding/json"
)

// UedafEventNotification Data within a UEDAF Event Notification request
type UedafEventNotification struct {
	ReportEvent *UedafEventReport `json:"reportEvent,omitempty"`
	EventSubsSyncInfo *UedafEventSubsSyncInfo `json:"eventSubsSyncInfo,omitempty"`
}

// NewUedafEventNotification instantiates a new UedafEventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUedafEventNotification() *UedafEventNotification {
	this := UedafEventNotification{}
	return &this
}

// NewUedafEventNotificationWithDefaults instantiates a new UedafEventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUedafEventNotificationWithDefaults() *UedafEventNotification {
	this := UedafEventNotification{}
	return &this
}

// GetReportEvent returns the ReportEvent field value if set, zero value otherwise.
func (o *UedafEventNotification) GetReportEvent() UedafEventReport {
	if o == nil || o.ReportEvent == nil {
		var ret UedafEventReport
		return ret
	}
	return *o.ReportEvent
}

// GetReportEventOk returns a tuple with the ReportEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UedafEventNotification) GetReportEventOk() (*UedafEventReport, bool) {
	if o == nil || o.ReportEvent == nil {
		return nil, false
	}
	return o.ReportEvent, true
}

// HasReportEvent returns a boolean if a field has been set.
func (o *UedafEventNotification) HasReportEvent() bool {
	if o != nil && o.ReportEvent != nil {
		return true
	}

	return false
}

// SetReportEvent gets a reference to the given UedafEventReport and assigns it to the ReportEvent field.
func (o *UedafEventNotification) SetReportEvent(v UedafEventReport) {
	o.ReportEvent = &v
}

// GetEventSubsSyncInfo returns the EventSubsSyncInfo field value if set, zero value otherwise.
func (o *UedafEventNotification) GetEventSubsSyncInfo() UedafEventSubsSyncInfo {
	if o == nil || o.EventSubsSyncInfo == nil {
		var ret UedafEventSubsSyncInfo
		return ret
	}
	return *o.EventSubsSyncInfo
}

// GetEventSubsSyncInfoOk returns a tuple with the EventSubsSyncInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UedafEventNotification) GetEventSubsSyncInfoOk() (*UedafEventSubsSyncInfo, bool) {
	if o == nil || o.EventSubsSyncInfo == nil {
		return nil, false
	}
	return o.EventSubsSyncInfo, true
}

// HasEventSubsSyncInfo returns a boolean if a field has been set.
func (o *UedafEventNotification) HasEventSubsSyncInfo() bool {
	if o != nil && o.EventSubsSyncInfo != nil {
		return true
	}

	return false
}

// SetEventSubsSyncInfo gets a reference to the given UedafEventSubsSyncInfo and assigns it to the EventSubsSyncInfo field.
func (o *UedafEventNotification) SetEventSubsSyncInfo(v UedafEventSubsSyncInfo) {
	o.EventSubsSyncInfo = &v
}

func (o UedafEventNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReportEvent != nil {
		toSerialize["reportEvent"] = o.ReportEvent
	}
	if o.EventSubsSyncInfo != nil {
		toSerialize["eventSubsSyncInfo"] = o.EventSubsSyncInfo
	}
	return json.Marshal(toSerialize)
}

type NullableUedafEventNotification struct {
	value *UedafEventNotification
	isSet bool
}

func (v NullableUedafEventNotification) Get() *UedafEventNotification {
	return v.value
}

func (v *NullableUedafEventNotification) Set(val *UedafEventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableUedafEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableUedafEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUedafEventNotification(val *UedafEventNotification) *NullableUedafEventNotification {
	return &NullableUedafEventNotification{value: val, isSet: true}
}

func (v NullableUedafEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUedafEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


