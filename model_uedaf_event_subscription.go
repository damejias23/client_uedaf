/*
Nuedaf_EventExposure

UEDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uedaf

import (
	"encoding/json"
)

// UedafEventSubscription Represents an individual event subscription resource on UEDAF
type UedafEventSubscription struct {
	EventRequest UedafEvent `json:"eventRequest"`
	// String providing an URI formatted according to RFC 3986.
	EventNotifyUri string `json:"eventNotifyUri"`
	Options *UedafEventMode `json:"options,omitempty"`
	TgtUe *TargetUeInformation `json:"tgtUe,omitempty"`
}

// NewUedafEventSubscription instantiates a new UedafEventSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUedafEventSubscription(eventRequest UedafEvent, eventNotifyUri string) *UedafEventSubscription {
	this := UedafEventSubscription{}
	this.EventRequest = eventRequest
	this.EventNotifyUri = eventNotifyUri
	return &this
}

// NewUedafEventSubscriptionWithDefaults instantiates a new UedafEventSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUedafEventSubscriptionWithDefaults() *UedafEventSubscription {
	this := UedafEventSubscription{}
	return &this
}

// GetEventRequest returns the EventRequest field value
func (o *UedafEventSubscription) GetEventRequest() UedafEvent {
	if o == nil {
		var ret UedafEvent
		return ret
	}

	return o.EventRequest
}

// GetEventRequestOk returns a tuple with the EventRequest field value
// and a boolean to check if the value has been set.
func (o *UedafEventSubscription) GetEventRequestOk() (*UedafEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventRequest, true
}

// SetEventRequest sets field value
func (o *UedafEventSubscription) SetEventRequest(v UedafEvent) {
	o.EventRequest = v
}

// GetEventNotifyUri returns the EventNotifyUri field value
func (o *UedafEventSubscription) GetEventNotifyUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventNotifyUri
}

// GetEventNotifyUriOk returns a tuple with the EventNotifyUri field value
// and a boolean to check if the value has been set.
func (o *UedafEventSubscription) GetEventNotifyUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventNotifyUri, true
}

// SetEventNotifyUri sets field value
func (o *UedafEventSubscription) SetEventNotifyUri(v string) {
	o.EventNotifyUri = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UedafEventSubscription) GetOptions() UedafEventMode {
	if o == nil || o.Options == nil {
		var ret UedafEventMode
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UedafEventSubscription) GetOptionsOk() (*UedafEventMode, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UedafEventSubscription) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given UedafEventMode and assigns it to the Options field.
func (o *UedafEventSubscription) SetOptions(v UedafEventMode) {
	o.Options = &v
}

// GetTgtUe returns the TgtUe field value if set, zero value otherwise.
func (o *UedafEventSubscription) GetTgtUe() TargetUeInformation {
	if o == nil || o.TgtUe == nil {
		var ret TargetUeInformation
		return ret
	}
	return *o.TgtUe
}

// GetTgtUeOk returns a tuple with the TgtUe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UedafEventSubscription) GetTgtUeOk() (*TargetUeInformation, bool) {
	if o == nil || o.TgtUe == nil {
		return nil, false
	}
	return o.TgtUe, true
}

// HasTgtUe returns a boolean if a field has been set.
func (o *UedafEventSubscription) HasTgtUe() bool {
	if o != nil && o.TgtUe != nil {
		return true
	}

	return false
}

// SetTgtUe gets a reference to the given TargetUeInformation and assigns it to the TgtUe field.
func (o *UedafEventSubscription) SetTgtUe(v TargetUeInformation) {
	o.TgtUe = &v
}

func (o UedafEventSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventRequest"] = o.EventRequest
	}
	if true {
		toSerialize["eventNotifyUri"] = o.EventNotifyUri
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.TgtUe != nil {
		toSerialize["tgtUe"] = o.TgtUe
	}
	return json.Marshal(toSerialize)
}

type NullableUedafEventSubscription struct {
	value *UedafEventSubscription
	isSet bool
}

func (v NullableUedafEventSubscription) Get() *UedafEventSubscription {
	return v.value
}

func (v *NullableUedafEventSubscription) Set(val *UedafEventSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableUedafEventSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableUedafEventSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUedafEventSubscription(val *UedafEventSubscription) *NullableUedafEventSubscription {
	return &NullableUedafEventSubscription{value: val, isSet: true}
}

func (v NullableUedafEventSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUedafEventSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


