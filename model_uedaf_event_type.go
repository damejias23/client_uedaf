/*
Nuedaf_EventExposure

UEDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uedaf

import (
	"encoding/json"
	"fmt"
)

// UedafEventType Describes the supported event types of Nuedaf_EventExposure Service
type UedafEventType struct {
	UedafEventTypeAnyOf *UedafEventTypeAnyOf
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UedafEventType) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into UedafEventTypeAnyOf
	err = json.Unmarshal(data, &dst.UedafEventTypeAnyOf);
	if err == nil {
		jsonUedafEventTypeAnyOf, _ := json.Marshal(dst.UedafEventTypeAnyOf)
		if string(jsonUedafEventTypeAnyOf) == "{}" { // empty struct
			dst.UedafEventTypeAnyOf = nil
		} else {
			return nil // data stored in dst.UedafEventTypeAnyOf, return on the first match
		}
	} else {
		dst.UedafEventTypeAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(UedafEventType)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *UedafEventType) MarshalJSON() ([]byte, error) {
	if src.UedafEventTypeAnyOf != nil {
		return json.Marshal(&src.UedafEventTypeAnyOf)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUedafEventType struct {
	value *UedafEventType
	isSet bool
}

func (v NullableUedafEventType) Get() *UedafEventType {
	return v.value
}

func (v *NullableUedafEventType) Set(val *UedafEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableUedafEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableUedafEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUedafEventType(val *UedafEventType) *NullableUedafEventType {
	return &NullableUedafEventType{value: val, isSet: true}
}

func (v NullableUedafEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUedafEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


