/*
Nuedaf_EventExposure

UEDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uedaf

import (
	"encoding/json"
	"fmt"
)

// UedafEventTypeAnyOf the model 'UedafEventTypeAnyOf'
type UedafEventTypeAnyOf string

// List of UedafEventType_anyOf
const (
	PHY_LEVEL_INFORMATION UedafEventTypeAnyOf = "PHY_LEVEL_INFORMATION"
)

// All allowed values of UedafEventTypeAnyOf enum
var AllowedUedafEventTypeAnyOfEnumValues = []UedafEventTypeAnyOf{
	"PHY_LEVEL_INFORMATION",
}

func (v *UedafEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UedafEventTypeAnyOf(value)
	for _, existing := range AllowedUedafEventTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UedafEventTypeAnyOf", value)
}

// NewUedafEventTypeAnyOfFromValue returns a pointer to a valid UedafEventTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUedafEventTypeAnyOfFromValue(v string) (*UedafEventTypeAnyOf, error) {
	ev := UedafEventTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UedafEventTypeAnyOf: valid values are %v", v, AllowedUedafEventTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UedafEventTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedUedafEventTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UedafEventType_anyOf value
func (v UedafEventTypeAnyOf) Ptr() *UedafEventTypeAnyOf {
	return &v
}

type NullableUedafEventTypeAnyOf struct {
	value *UedafEventTypeAnyOf
	isSet bool
}

func (v NullableUedafEventTypeAnyOf) Get() *UedafEventTypeAnyOf {
	return v.value
}

func (v *NullableUedafEventTypeAnyOf) Set(val *UedafEventTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUedafEventTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUedafEventTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUedafEventTypeAnyOf(val *UedafEventTypeAnyOf) *NullableUedafEventTypeAnyOf {
	return &NullableUedafEventTypeAnyOf{value: val, isSet: true}
}

func (v NullableUedafEventTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUedafEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

